/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hyperspecjava;

import hyperspecutils.BILReader;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import static org.opencv.core.CvType.CV_8U;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.Point;
import org.opencv.core.Size;
import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;


/**
 *
 * @author u4110553
 */
public class ImageTrainer extends javax.swing.JPanel implements MouseListener, MouseMotionListener {

    /**
     * Creates new form ImageTrainer
     */
    
    private int lastX, lastY, newX, newY;
    private Graphics imagegraphics;
    Mat img;
    private boolean class1 = true;
    private boolean class2;
    ArrayList<Point> class1points = new ArrayList();
    ArrayList<Point> class2points = new ArrayList();
    BILReader reader;
    ImageIcon ii;
    float xfactor, yfactor;
    
    public ImageTrainer(Mat img, BILReader reader) {
            
            this.reader = reader;
            this.img = img;
            this.xfactor=(float)img.cols()/(float)reader.getWidth();
            this.yfactor=(float)img.rows()/(float)reader.getImageframes();
            initComponents();
           
            jToggleButton1.doClick();
            
            jScrollPane2.addMouseMotionListener(this);
            jScrollPane2.addMouseListener(this);
            //setPreferredSize(new Dimension(1000, 1000));
            setBorder(BorderFactory.createEmptyBorder(20,20,20,20));
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        try{
            MatOfByte matOfByte = new MatOfByte();
            Highgui.imencode(".jpg", img, matOfByte);
            byte[] byteArray = matOfByte.toArray();
            InputStream in = new ByteArrayInputStream(byteArray);
            BufferedImage image = ImageIO.read(in);
            ii = new ImageIcon(image);

            jScrollPane2 = new JScrollPane(new JLabel(ii));
        } catch (IOException ex) {
            Logger.getLogger(ImageTrainer.class.getName()).log(Level.SEVERE, null, ex);
        };
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        jButton1 = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(1500, 32767));
        setPreferredSize(new java.awt.Dimension(1500, 1500));

        jButton3.setText("Train");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Class 1");
        jToggleButton1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jToggleButton1StateChanged(evt);
            }
        });
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton2.setText("Class 2");
        jToggleButton2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jToggleButton2StateChanged(evt);
            }
        });
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setDoubleBuffered(true);
        jScrollPane2.setHorizontalScrollBar(null);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(1000, 800));
        jScrollPane2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseDragged(evt);
            }
        });

        label1.setText("Class 1: 0 spectra");

        label2.setText("Class 2: 0 spectra");

        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jToggleButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jToggleButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(label2, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(29, 29, 29)
                                .addComponent(label3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton1)
                    .addComponent(jToggleButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jScrollPane2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseDragged
        //logPoint("Mouse dragged", evt);
    }//GEN-LAST:event_jScrollPane2MouseDragged

    private void jToggleButton1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jToggleButton1StateChanged
        
        if(jToggleButton2.isSelected()){
            jToggleButton2.doClick();
            class2=false;
            class1 = true;
        } else {
            
        }
        
    }//GEN-LAST:event_jToggleButton1StateChanged

    private void jToggleButton2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jToggleButton2StateChanged
        
        if(jToggleButton1.isSelected()){
            jToggleButton1.doClick();
            class1=false;
            class2 = true;
        } else {
            
        }
    }//GEN-LAST:event_jToggleButton2StateChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        
                 boolean trained = reader.trainModel(class1points, class2points);
                
                if(trained){
            label3.setText("Model trained");
        
                Mat predicted = reader.predictImage();
                Mat predicted8 = new Mat();
                predicted.convertTo(predicted8, CV_8U, 255.0);
                
                Mat resizeimage = new Mat();
                Size sz = new Size(1000,800);
                Imgproc.resize(predicted8, resizeimage, sz );
                
                PredictedImage.main(predicted8, reader);
               
            }
        
       
        
        
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
      
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        repaint();
        class1points = new ArrayList();
        class2points = new ArrayList();
        label1.setText("Class 1: " +class1points.size() + " spectra.");
        label2.setText("Class 2: " +class2points.size() + " spectra.");
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
              
        
        
        
        
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    public void main(Mat img) {

        try {
            /* Use an appropriate Look and Feel */
            try {
                //UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
                //UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");
                UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            } catch (UnsupportedLookAndFeelException | IllegalAccessException | InstantiationException | ClassNotFoundException ex) {
                ex.printStackTrace();
            }
            /* Turn off metal's use of bold fonts */
            UIManager.put("swing.boldMetal", Boolean.FALSE);
            //Schedule a job for the event dispatch thread:
            //creating and showing this application's GUI.
            javax.swing.SwingUtilities.invokeAndWait(new Runnable() {
                @Override
                public void run() {
                    createAndShowGUI(img);
                }
            });
        } catch (InterruptedException ex) {
            Logger.getLogger(ImageTrainer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(ImageTrainer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event dispatch thread.
     */
    public static void createAndShowGUI(Mat img) {
        //Create and set up the window.
        
        /*JFrame frame = new JFrame("MouseEventDemo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         
        //Create and set up the content pane.
        JComponent newContentPane = new ImageTrainer(img);
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);
        
            
        //Display the window.
        frame.pack();
        frame.setVisible(true);*/
    }
    
    void eventOutput(String eventDescription, MouseEvent e) {
        /*jTextArea2.append(eventDescription + " detected on "
                + e.getComponent().getClass().getName()
                + "." + NEWLINE);
        jTextArea2.setCaretPosition(jTextArea2.getDocument().getLength());*/
    }
     
    public void mousePressed(MouseEvent e) {
        lastX = e.getX();
        lastY = e.getY();
        newX = e.getX();
        newY = e.getY();
    }
     
    public void mouseReleased(MouseEvent e) {
        
    }
     
    public void mouseEntered(MouseEvent e) {
        
    }
     
    public void mouseExited(MouseEvent e) {
        
    }
     
    public void mouseClicked(MouseEvent e) {
        
        lastX = e.getX();
        lastY = e.getY();
        newX = e.getX();
        newY = e.getY();
        logPoint("Mouse clicked", e);
    }

    public void mouseDragged(MouseEvent e) {
       logPoint("Mouse dragged", e);
    }
    
    public void mouseMoved(MouseEvent e){
        
    }

    private void logPoint(String eventDescription, MouseEvent e) {
        
        newX = e.getX();
        newY = e.getY();
        if(class1){
           
            imagegraphics = jScrollPane2.getGraphics();
            imagegraphics.setColor(Color.RED);
            imagegraphics.drawLine(lastX, lastY, newX, newY);
            Point currentpoint = new Point((newX/xfactor), (newY/yfactor));
            
            boolean exists = false;
            for(int i=0; i<class1points.size(); i++){
                if(currentpoint.equals(class1points.get(i))) {
                    exists=true;
                    
                    break;
                }
            }
            if(!exists){
            class1points.add(currentpoint);
            label1.setText("Class 1: " +class1points.size() + " spectra.");
            }
        } else if(class2) {
            imagegraphics = jScrollPane2.getGraphics();
            imagegraphics.setColor(Color.BLUE);
            imagegraphics.drawLine(lastX, lastY, newX, newY);
            Point currentpoint = new Point((newX/xfactor), (newY/yfactor));
            boolean exists = false;
            for(int i=0; i<class2points.size(); i++){
                if(currentpoint.equals(class2points.get(i))) {
                    exists=true;
                    
                    break;
                }
            }
            if(!exists){
            class2points.add(currentpoint);
            label2.setText("Class 2: " +class2points.size() + " spectra.");
            }
        }
        
        lastX = newX;
        lastY = newY;
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    // End of variables declaration//GEN-END:variables
}
